
Scheinwerfer_Dirk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001312  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d04  00000000  00000000  000026aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000033b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  0000357c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fef  00000000  00000000  00003ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  88:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:

bool init_ADC()
{
	//ADMUX - ADC Multiplexer
	//Ref Pin = 00
	ADMUX &= ~(1<<REFS1);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);
  9a:	80 81       	ld	r24, Z
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	80 83       	st	Z, r24
	//Left Adj
	ADMUX |= (1<<ADLAR);
  a0:	80 81       	ld	r24, Z
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	80 83       	st	Z, r24
	//Channel select - 0
	ADMUX &= ~(1<<MUX3);
  a6:	80 81       	ld	r24, Z
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
  ac:	80 81       	ld	r24, Z
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
  b2:	80 81       	ld	r24, Z
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX0);
  b8:	80 81       	ld	r24, Z
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	80 83       	st	Z, r24
	
	//ADCSR - ADC Control and Status
	//A
	ADCSRA = 0x00;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	//ADC Enable
	ADCSRA &= ~(1<<ADEN);
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	80 83       	st	Z, r24
	//ADC Start Conversion
	ADCSRA &= ~(1<<ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	80 83       	st	Z, r24
	//Auto Trigger
	ADCSRA &= ~(1<<ADATE);
  d0:	80 81       	ld	r24, Z
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	80 83       	st	Z, r24
	//Interrupt
	ADCSRA &= ~(1<<ADIF);
  d6:	80 81       	ld	r24, Z
  d8:	8f 7e       	andi	r24, 0xEF	; 239
  da:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADIE);
  dc:	80 81       	ld	r24, Z
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	80 83       	st	Z, r24
	//Clock - 2,2,4,8,16,32,64,128
	ADCSRA |= (1<<ADPS2);
  e2:	80 81       	ld	r24, Z
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS0);
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
	
	//B
	ADCSRB = 0x00;
  f4:	ab e7       	ldi	r26, 0x7B	; 123
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	1c 92       	st	X, r1
	//Analog Comperator
	ADCSRB &= ~ (1<<ACME);
  fa:	8c 91       	ld	r24, X
  fc:	8f 7b       	andi	r24, 0xBF	; 191
  fe:	8c 93       	st	X, r24
	//Auto Trigger Source
	ADCSRB &= ~ (1<<ADTS2);
 100:	8c 91       	ld	r24, X
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	8c 93       	st	X, r24
	ADCSRB &= ~ (1<<ADTS1);
 106:	8c 91       	ld	r24, X
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	8c 93       	st	X, r24
	ADCSRB &= ~ (1<<ADTS0);
 10c:	8c 91       	ld	r24, X
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	8c 93       	st	X, r24
	
	//DIDR0 - Digital Input Buffer Disable - do for every Analog Input
	DIDR0 = 0x00;
 112:	ae e7       	ldi	r26, 0x7E	; 126
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	1c 92       	st	X, r1
	DIDR0 &= ~(1<<ADC5D);
 118:	8c 91       	ld	r24, X
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	8c 93       	st	X, r24
	DIDR0 &= ~(1<<ADC4D);
 11e:	8c 91       	ld	r24, X
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC3D);
 124:	8c 91       	ld	r24, X
 126:	88 60       	ori	r24, 0x08	; 8
 128:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC2D);
 12a:	8c 91       	ld	r24, X
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);
 130:	8c 91       	ld	r24, X
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC0D);
 136:	8c 91       	ld	r24, X
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8c 93       	st	X, r24
		
	//Start ADC
	ADCSRA |= (1<<ADEN);
 13c:	80 81       	ld	r24, Z
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 83       	st	Z, r24
	
	//Dummy Readout
	//Start
	ADCSRA |= (1<<ADSC);
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
	//Wait for hardware
	while(ADCSRA & (1<<ADSC)){}        
 148:	80 81       	ld	r24, Z
 14a:	86 fd       	sbrc	r24, 6
 14c:	fd cf       	rjmp	.-6      	; 0x148 <init_ADC+0xb8>
	//Get Result
	uint8_t result = ADCH;	
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return true;
}
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret

00000156 <readADC>:

uint8_t readADC(uint8_t channel)
{
	//Select Channel
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	90 7e       	andi	r25, 0xE0	; 224
 15e:	8f 71       	andi	r24, 0x1F	; 31
 160:	89 2b       	or	r24, r25
 162:	80 83       	st	Z, r24
	//Start Readout
	ADCSRA |= (1<<ADSC);
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
	//Wait for Hardware            
	while(ADCSRA & (1<<ADSC)){}
 16e:	80 81       	ld	r24, Z
 170:	86 fd       	sbrc	r24, 6
 172:	fd cf       	rjmp	.-6      	; 0x16e <readADC+0x18>
	//Return Value  
	return ADCH;	
 174:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 178:	08 95       	ret

0000017a <init_Counter0_PWM>:
#include "init_Counter0_PWM.h"

bool init_Counter0_PWM()
{
	//Ausgang setzen
	DDRD |= (1<<DDD5);
 17a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<DDD6);
 17c:	56 9a       	sbi	0x0a, 6	; 10
		
	//PWM
	//TCCR0A
	TCCR0A |= (1<<COM0A1);
 17e:	84 b5       	in	r24, 0x24	; 36
 180:	80 68       	ori	r24, 0x80	; 128
 182:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A0);
 184:	84 b5       	in	r24, 0x24	; 36
 186:	80 64       	ori	r24, 0x40	; 64
 188:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0B1);
 18a:	84 b5       	in	r24, 0x24	; 36
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0B0);
 190:	84 b5       	in	r24, 0x24	; 36
 192:	80 61       	ori	r24, 0x10	; 16
 194:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
 196:	84 b5       	in	r24, 0x24	; 36
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
 19c:	84 b5       	in	r24, 0x24	; 36
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	84 bd       	out	0x24, r24	; 36

	//TCCR0B
	TCCR0B &= ~ (1<<FOC0A);
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~ (1<<FOC0B);
 1a8:	85 b5       	in	r24, 0x25	; 37
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~ (1<<WGM02);
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS02);
 1b4:	85 b5       	in	r24, 0x25	; 37
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~ (1<<CS01);
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	85 bd       	out	0x25, r24	; 37

	//TIMSK0
	TIMSK0 &= ~ (1<<OCIE0B); //B Match Interrupt
 1c6:	ee e6       	ldi	r30, 0x6E	; 110
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	80 83       	st	Z, r24
	TIMSK0 &= ~ (1<<OCIE0A); //A Match Interrupt
 1d0:	80 81       	ld	r24, Z
 1d2:	8d 7f       	andi	r24, 0xFD	; 253
 1d4:	80 83       	st	Z, r24
	TIMSK0 &= ~ (1<<TOIE0);  //Overflow Interrupt
 1d6:	80 81       	ld	r24, Z
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	80 83       	st	Z, r24

	//TIFR0
	//Interrupt Flags for TIMSK0 enabled Bits

	//Counter
	TCNT0 = 0x00;
 1dc:	16 bc       	out	0x26, r1	; 38

	//OutputCompareRegister (PWM Rate)
	OCR0A = 0x00; //PD6
 1de:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00; //PD5
 1e0:	18 bc       	out	0x28, r1	; 40
	
	return true;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	08 95       	ret

000001e6 <init_Counter1_PWM>:
#include "init_Counter1_PWM.h"

bool init_Counter1_PWM()
{
	//Ausgang setzen
	DDRB |= (1<<DDB1);
 1e6:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<DDB2);
 1e8:	22 9a       	sbi	0x04, 2	; 4
	
	//PWM
	//TCCR1A
	TCCR1A |= (1<<COM1A1);
 1ea:	e0 e8       	ldi	r30, 0x80	; 128
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	80 83       	st	Z, r24
	TCCR1A &= ~ (1<<COM1A0);
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 7b       	andi	r24, 0xBF	; 191
 1f8:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1);
 1fa:	80 81       	ld	r24, Z
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	80 83       	st	Z, r24
	TCCR1A &= ~ (1<<COM1B0);
 200:	80 81       	ld	r24, Z
 202:	8f 7e       	andi	r24, 0xEF	; 239
 204:	80 83       	st	Z, r24


	TCCR1A |= (1<<WGM10);
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
	TCCR1A &= ~ (1<<WGM11);
 20c:	80 81       	ld	r24, Z
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	80 83       	st	Z, r24

	//TCCR1B
	TCCR1B &= ~ (1<<ICNC1);
 212:	e1 e8       	ldi	r30, 0x81	; 129
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8f 77       	andi	r24, 0x7F	; 127
 21a:	80 83       	st	Z, r24
	TCCR1B &= ~ (1<<ICES1);
 21c:	80 81       	ld	r24, Z
 21e:	8f 7b       	andi	r24, 0xBF	; 191
 220:	80 83       	st	Z, r24

	TCCR1B &= ~ (1<<WGM13);
 222:	80 81       	ld	r24, Z
 224:	8f 7e       	andi	r24, 0xEF	; 239
 226:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	TCCR1B &= ~ (1<<CS12);
 22e:	80 81       	ld	r24, Z
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	80 83       	st	Z, r24
	TCCR1B &= ~ (1<<CS11);
 234:	80 81       	ld	r24, Z
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);
 23a:	80 81       	ld	r24, Z
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	80 83       	st	Z, r24
	
	//TCCR1C
	TCCR1C &= ~ (1<<FOC1A);
 240:	e2 e8       	ldi	r30, 0x82	; 130
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	80 83       	st	Z, r24
	TCCR1C &= ~ (1<<FOC1B);	
 24a:	80 81       	ld	r24, Z
 24c:	8f 7b       	andi	r24, 0xBF	; 191
 24e:	80 83       	st	Z, r24
	
	//TIMSK1
	TIMSK1 &= ~ (1<<ICIE1); //
 250:	ef e6       	ldi	r30, 0x6F	; 111
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	80 83       	st	Z, r24
	TIMSK1 &= ~ (1<<OCIE1B); //B Match Interrupt
 25a:	80 81       	ld	r24, Z
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	80 83       	st	Z, r24
	TIMSK1 &= ~ (1<<OCIE1A); //A Match Interrupt
 260:	80 81       	ld	r24, Z
 262:	8d 7f       	andi	r24, 0xFD	; 253
 264:	80 83       	st	Z, r24
	TIMSK1 &= ~ (1<<TOIE1);  //Overflow Interrupt
 266:	80 81       	ld	r24, Z
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	80 83       	st	Z, r24

	//TIFR0
	//Interrupt Flags for TIMSK0 enabled Bits

	//Counter
	TCNT1 = 0x00;
 26c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 270:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	//OutputCompareRegister (PWM Rate)
	OCR1A = 0x00; //PB1
 274:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 278:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0x00; //PB2
 27c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 280:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	return true;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <init_Counter2_PWM>:
#include "init_Counter2_PWM.h"

bool init_Counter2_PWM()
{
	//Ausgang setzen
	DDRD |= (1<<DDD3);
 288:	53 9a       	sbi	0x0a, 3	; 10
		
	//PWM
	//TCCR2A
	TCCR2A &= ~ (1<<COM2A1);
 28a:	e0 eb       	ldi	r30, 0xB0	; 176
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8f 77       	andi	r24, 0x7F	; 127
 292:	80 83       	st	Z, r24
	TCCR2A &= ~ (1<<COM2A0);
 294:	80 81       	ld	r24, Z
 296:	8f 7b       	andi	r24, 0xBF	; 191
 298:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);
 29a:	80 81       	ld	r24, Z
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	80 83       	st	Z, r24
	TCCR2A &= ~ (1<<COM2B0);
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 7e       	andi	r24, 0xEF	; 239
 2a4:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM20);
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21);
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24

	//TCCR2B
	TCCR2B &= ~ (1<<FOC2A);
 2b2:	e1 eb       	ldi	r30, 0xB1	; 177
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	80 83       	st	Z, r24
	TCCR2B &= ~ (1<<FOC2B);
 2bc:	80 81       	ld	r24, Z
 2be:	8f 7b       	andi	r24, 0xBF	; 191
 2c0:	80 83       	st	Z, r24
	TCCR2B &= ~ (1<<WGM22);
 2c2:	80 81       	ld	r24, Z
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	80 83       	st	Z, r24
	TCCR2B &= ~ (1<<CS22);
 2c8:	80 81       	ld	r24, Z
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	80 83       	st	Z, r24
	TCCR2B &= ~ (1<<CS21);
 2ce:	80 81       	ld	r24, Z
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);
 2d4:	80 81       	ld	r24, Z
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24

	//TIMSK2
	TIMSK2 &= ~ (1<<OCIE2B); //B Match Interrupt
 2da:	e0 e7       	ldi	r30, 0x70	; 112
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	80 83       	st	Z, r24
	TIMSK2 &= ~ (1<<OCIE2A); //A Match Interrupt
 2e4:	80 81       	ld	r24, Z
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	80 83       	st	Z, r24
	TIMSK2 &= ~ (1<<TOIE2);  //Overflow Interrupt
 2ea:	80 81       	ld	r24, Z
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	80 83       	st	Z, r24

	//TIFR0
	//Interrupt Flags for TIMSK0 enabled Bits

	//Counter
	TCNT2 = 0x00;
 2f0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	//OutputCompareRegister (PWM Rate)
	OCR2A = 0x00; //PB3
 2f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00; //PD3
 2f8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	return true;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	08 95       	ret

00000300 <set_Test_LED>:
	DDRD |= (1<<DDD2);
}

bool set_Test_LED(bool pvalue)
{
	if(pvalue)
 300:	88 23       	and	r24, r24
 302:	11 f0       	breq	.+4      	; 0x308 <set_Test_LED+0x8>
	{
		PORTD |= (1<<PIND2);
 304:	5a 9a       	sbi	0x0b, 2	; 11
 306:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1<<PIND2);
 308:	5a 98       	cbi	0x0b, 2	; 11
	}
	
 30a:	08 95       	ret

0000030c <init_IO>:

#include "IO.h"

bool init_IO()
{
	DDRD |= (1<<DDD0);
 30c:	50 9a       	sbi	0x0a, 0	; 10
	DDRD |= (1<<DDD1);
 30e:	51 9a       	sbi	0x0a, 1	; 10
		
	return true;
}
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret

00000314 <init>:
bool change_Mode = false;

bool init()
{

	if(!init_Counter0_PWM())return false;
 314:	0e 94 bd 00 	call	0x17a	; 0x17a <init_Counter0_PWM>
 318:	88 23       	and	r24, r24
 31a:	69 f0       	breq	.+26     	; 0x336 <init+0x22>
	if(!init_Counter1_PWM())return false;
 31c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <init_Counter1_PWM>
 320:	88 23       	and	r24, r24
 322:	49 f0       	breq	.+18     	; 0x336 <init+0x22>
	if(!init_Counter2_PWM())return false;
 324:	0e 94 44 01 	call	0x288	; 0x288 <init_Counter2_PWM>
 328:	88 23       	and	r24, r24
 32a:	29 f0       	breq	.+10     	; 0x336 <init+0x22>
	
	if(!init_ADC())return false;
 32c:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
 330:	81 11       	cpse	r24, r1
	
	if(!init_IO())return false;
 332:	0e 94 86 01 	call	0x30c	; 0x30c <init_IO>
	
	//init_Test_LED();
		//init_Interrupts();
		
	return true;
}
 336:	08 95       	ret

00000338 <main>:

int main(void)
{
 338:	2f 92       	push	r2
 33a:	3f 92       	push	r3
 33c:	4f 92       	push	r4
 33e:	5f 92       	push	r5
 340:	6f 92       	push	r6
 342:	7f 92       	push	r7
 344:	8f 92       	push	r8
 346:	9f 92       	push	r9
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <main+0x26>
 35e:	00 d0       	rcall	.+0      	; 0x360 <main+0x28>
 360:	1f 92       	push	r1
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	//Init
	bool initSuccessfull = init();
 366:	0e 94 8a 01 	call	0x314	; 0x314 <init>
	
	bool RDown = 0;
	bool GDown = 0;
	bool BDown = 1;
		
	sei();
 36a:	78 94       	sei
	
	//Code   
	while (initSuccessfull)
 36c:	88 23       	and	r24, r24
 36e:	09 f4       	brne	.+2      	; 0x372 <main+0x3a>
 370:	e2 c1       	rjmp	.+964    	; 0x736 <__EEPROM_REGION_LENGTH__+0x336>
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	29 83       	std	Y+1, r18	; 0x01
 376:	1a 82       	std	Y+2, r1	; 0x02
 378:	61 2c       	mov	r6, r1
 37a:	1b 82       	std	Y+3, r1	; 0x03
 37c:	31 2c       	mov	r3, r1
 37e:	22 24       	eor	r2, r2
 380:	23 94       	inc	r2
 382:	00 e0       	ldi	r16, 0x00	; 0
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	1d 82       	std	Y+5, r1	; 0x05
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	8c 83       	std	Y+4, r24	; 0x04
					RDown = true;
				}
			}
			
			
			OCR1A = ValueR;
 38c:	0f 2e       	mov	r0, r31
 38e:	f8 e8       	ldi	r31, 0x88	; 136
 390:	af 2e       	mov	r10, r31
 392:	b1 2c       	mov	r11, r1
 394:	f0 2d       	mov	r31, r0
			OCR1B = ValueG;
 396:	0f 2e       	mov	r0, r31
 398:	fa e8       	ldi	r31, 0x8A	; 138
 39a:	cf 2e       	mov	r12, r31
 39c:	d1 2c       	mov	r13, r1
 39e:	f0 2d       	mov	r31, r0
			OCR2B = ValueB;
 3a0:	0f 2e       	mov	r0, r31
 3a2:	f4 eb       	ldi	r31, 0xB4	; 180
 3a4:	ef 2e       	mov	r14, r31
 3a6:	f1 2c       	mov	r15, r1
 3a8:	f0 2d       	mov	r31, r0
			OCR0A = LightOut;
			OCR0B = LightOut;
			_delay_ms(50);
			OCR0A = 0x20;
			_delay_ms(50);
			OCR0B = LightFull;
 3aa:	44 24       	eor	r4, r4
 3ac:	4a 94       	dec	r4
			_delay_ms(50);
			OCR0B = 0xBF;
			_delay_ms(50);
			OCR0A = 0x80;
			_delay_ms(50);
			OCR0B = LightMid;
 3ae:	0f 2e       	mov	r0, r31
 3b0:	ff e6       	ldi	r31, 0x6F	; 111
 3b2:	5f 2e       	mov	r5, r31
 3b4:	f0 2d       	mov	r31, r0
	
	//Code   
	while (initSuccessfull)
	{   
	
		PotiR = readADC(0);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 ab 00 	call	0x156	; 0x156 <readADC>
 3bc:	88 2e       	mov	r8, r24
		PotiG = readADC(1);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 ab 00 	call	0x156	; 0x156 <readADC>
 3c4:	98 2e       	mov	r9, r24
		PotiB = readADC(2);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 ab 00 	call	0x156	; 0x156 <readADC>
 3cc:	78 2e       	mov	r7, r24
		PotiSys = readADC(3);
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 ab 00 	call	0x156	; 0x156 <readADC>
		
		_delay_ms(100);
		
		*/
			
		if(lMode == 1)
 3d4:	9c 81       	ldd	r25, Y+4	; 0x04
 3d6:	91 30       	cpi	r25, 0x01	; 1
 3d8:	01 f5       	brne	.+64     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			
			OCR1A = PotiR;
 3da:	88 2d       	mov	r24, r8
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	f5 01       	movw	r30, r10
 3e0:	91 83       	std	Z+1, r25	; 0x01
 3e2:	80 83       	st	Z, r24
			OCR1B = PotiG;
 3e4:	89 2d       	mov	r24, r9
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	f6 01       	movw	r30, r12
 3ea:	91 83       	std	Z+1, r25	; 0x01
 3ec:	80 83       	st	Z, r24
			OCR2B = PotiB;
 3ee:	f7 01       	movw	r30, r14
 3f0:	70 82       	st	Z, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0xbe>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0xc4>
 3fc:	00 00       	nop
 3fe:	9f e7       	ldi	r25, 0x7F	; 127
 400:	ea e1       	ldi	r30, 0x1A	; 26
 402:	f6 e0       	ldi	r31, 0x06	; 6
 404:	91 50       	subi	r25, 0x01	; 1
 406:	e0 40       	sbci	r30, 0x00	; 0
 408:	f0 40       	sbci	r31, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		else
		{
			_delay_ms(250);
		}
		
		if(change_Mode)
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 414:	81 11       	cpse	r24, r1
 416:	8b c1       	rjmp	.+790    	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
 418:	ce cf       	rjmp	.-100    	; 0x3b6 <main+0x7e>
			
			_delay_ms(10);
		}
								
		//Blink slow
		if(lMode == 2)
 41a:	2c 81       	ldd	r18, Y+4	; 0x04
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	a1 f5       	brne	.+104    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		{
			OCR0A = LightOut;
 420:	17 bc       	out	0x27, r1	; 39
			OCR0B = LightOut;
 422:	18 bc       	out	0x28, r1	; 40
 424:	8f e7       	ldi	r24, 0x7F	; 127
 426:	9a e1       	ldi	r25, 0x1A	; 26
 428:	e6 e0       	ldi	r30, 0x06	; 6
 42a:	81 50       	subi	r24, 0x01	; 1
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e0 40       	sbci	r30, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
			_delay_ms(250);
			OCR0A = LightMid;
 436:	57 bc       	out	0x27, r5	; 39
 438:	ff e7       	ldi	r31, 0x7F	; 127
 43a:	2a e1       	ldi	r18, 0x1A	; 26
 43c:	86 e0       	ldi	r24, 0x06	; 6
 43e:	f1 50       	subi	r31, 0x01	; 1
 440:	20 40       	sbci	r18, 0x00	; 0
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
			_delay_ms(250);
			OCR0B = LightFull;
 44a:	48 bc       	out	0x28, r4	; 40
 44c:	9f e7       	ldi	r25, 0x7F	; 127
 44e:	ea e1       	ldi	r30, 0x1A	; 26
 450:	f6 e0       	ldi	r31, 0x06	; 6
 452:	91 50       	subi	r25, 0x01	; 1
 454:	e0 40       	sbci	r30, 0x00	; 0
 456:	f0 40       	sbci	r31, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
			_delay_ms(250);
			OCR0A = LightFull;
 45e:	47 bc       	out	0x27, r4	; 39
 460:	2f e7       	ldi	r18, 0x7F	; 127
 462:	8a e1       	ldi	r24, 0x1A	; 26
 464:	96 e0       	ldi	r25, 0x06	; 6
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
			_delay_ms(250);
			OCR0B = LightMid;
 472:	58 bc       	out	0x28, r5	; 40
 474:	ef e7       	ldi	r30, 0x7F	; 127
 476:	fa e1       	ldi	r31, 0x1A	; 26
 478:	26 e0       	ldi	r18, 0x06	; 6
 47a:	e1 50       	subi	r30, 0x01	; 1
 47c:	f0 40       	sbci	r31, 0x00	; 0
 47e:	20 40       	sbci	r18, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	44 c1       	rjmp	.+648    	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
			_delay_ms(250);
		}
		
		//Blink fast
		else if(lMode == 3)
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	09 f0       	breq	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	b8 c0       	rjmp	.+368    	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
		{
			OCR0A = LightOut;
 490:	17 bc       	out	0x27, r1	; 39
			OCR0B = LightOut;
 492:	18 bc       	out	0x28, r1	; 40
 494:	9f e7       	ldi	r25, 0x7F	; 127
 496:	e8 e3       	ldi	r30, 0x38	; 56
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	e0 40       	sbci	r30, 0x00	; 0
 49e:	f0 40       	sbci	r31, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0x20;
 4a6:	20 e2       	ldi	r18, 0x20	; 32
 4a8:	27 bd       	out	0x27, r18	; 39
 4aa:	8f e7       	ldi	r24, 0x7F	; 127
 4ac:	98 e3       	ldi	r25, 0x38	; 56
 4ae:	e1 e0       	ldi	r30, 0x01	; 1
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e0 40       	sbci	r30, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
			_delay_ms(50);
			OCR0B = LightFull;
 4bc:	48 bc       	out	0x28, r4	; 40
 4be:	ff e7       	ldi	r31, 0x7F	; 127
 4c0:	28 e3       	ldi	r18, 0x38	; 56
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	f1 50       	subi	r31, 0x01	; 1
 4c6:	20 40       	sbci	r18, 0x00	; 0
 4c8:	80 40       	sbci	r24, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0x40;
 4d0:	90 e4       	ldi	r25, 0x40	; 64
 4d2:	97 bd       	out	0x27, r25	; 39
 4d4:	ef e7       	ldi	r30, 0x7F	; 127
 4d6:	f8 e3       	ldi	r31, 0x38	; 56
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	e1 50       	subi	r30, 0x01	; 1
 4dc:	f0 40       	sbci	r31, 0x00	; 0
 4de:	20 40       	sbci	r18, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
			_delay_ms(50);
			OCR0B = 0xDF;
 4e6:	8f ed       	ldi	r24, 0xDF	; 223
 4e8:	88 bd       	out	0x28, r24	; 40
 4ea:	9f e7       	ldi	r25, 0x7F	; 127
 4ec:	e8 e3       	ldi	r30, 0x38	; 56
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	91 50       	subi	r25, 0x01	; 1
 4f2:	e0 40       	sbci	r30, 0x00	; 0
 4f4:	f0 40       	sbci	r31, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4fa:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0x60;
 4fc:	20 e6       	ldi	r18, 0x60	; 96
 4fe:	27 bd       	out	0x27, r18	; 39
 500:	8f e7       	ldi	r24, 0x7F	; 127
 502:	98 e3       	ldi	r25, 0x38	; 56
 504:	e1 e0       	ldi	r30, 0x01	; 1
 506:	81 50       	subi	r24, 0x01	; 1
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e0 40       	sbci	r30, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 510:	00 00       	nop
			_delay_ms(50);
			OCR0B = 0xBF;
 512:	ff eb       	ldi	r31, 0xBF	; 191
 514:	f8 bd       	out	0x28, r31	; 40
 516:	2f e7       	ldi	r18, 0x7F	; 127
 518:	88 e3       	ldi	r24, 0x38	; 56
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 524:	00 c0       	rjmp	.+0      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 526:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0x80;
 528:	e0 e8       	ldi	r30, 0x80	; 128
 52a:	e7 bd       	out	0x27, r30	; 39
 52c:	ff e7       	ldi	r31, 0x7F	; 127
 52e:	28 e3       	ldi	r18, 0x38	; 56
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	f1 50       	subi	r31, 0x01	; 1
 534:	20 40       	sbci	r18, 0x00	; 0
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 53c:	00 00       	nop
			_delay_ms(50);
			OCR0B = LightMid;
 53e:	58 bc       	out	0x28, r5	; 40
 540:	9f e7       	ldi	r25, 0x7F	; 127
 542:	e8 e3       	ldi	r30, 0x38	; 56
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	91 50       	subi	r25, 0x01	; 1
 548:	e0 40       	sbci	r30, 0x00	; 0
 54a:	f0 40       	sbci	r31, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 550:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0xA0;
 552:	20 ea       	ldi	r18, 0xA0	; 160
 554:	27 bd       	out	0x27, r18	; 39
 556:	8f e7       	ldi	r24, 0x7F	; 127
 558:	98 e3       	ldi	r25, 0x38	; 56
 55a:	e1 e0       	ldi	r30, 0x01	; 1
 55c:	81 50       	subi	r24, 0x01	; 1
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e0 40       	sbci	r30, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 564:	00 c0       	rjmp	.+0      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 566:	00 00       	nop
			_delay_ms(50);
			OCR0B = LightMid;
 568:	58 bc       	out	0x28, r5	; 40
 56a:	ff e7       	ldi	r31, 0x7F	; 127
 56c:	28 e3       	ldi	r18, 0x38	; 56
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	f1 50       	subi	r31, 0x01	; 1
 572:	20 40       	sbci	r18, 0x00	; 0
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 57a:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0xC0;
 57c:	90 ec       	ldi	r25, 0xC0	; 192
 57e:	97 bd       	out	0x27, r25	; 39
 580:	ef e7       	ldi	r30, 0x7F	; 127
 582:	f8 e3       	ldi	r31, 0x38	; 56
 584:	21 e0       	ldi	r18, 0x01	; 1
 586:	e1 50       	subi	r30, 0x01	; 1
 588:	f0 40       	sbci	r31, 0x00	; 0
 58a:	20 40       	sbci	r18, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 590:	00 00       	nop
			_delay_ms(50);
			OCR0B = 0x5F;
 592:	8f e5       	ldi	r24, 0x5F	; 95
 594:	88 bd       	out	0x28, r24	; 40
 596:	8f e7       	ldi	r24, 0x7F	; 127
 598:	98 e3       	ldi	r25, 0x38	; 56
 59a:	e1 e0       	ldi	r30, 0x01	; 1
 59c:	81 50       	subi	r24, 0x01	; 1
 59e:	90 40       	sbci	r25, 0x00	; 0
 5a0:	e0 40       	sbci	r30, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 5a6:	00 00       	nop
			_delay_ms(50);
			OCR0A = 0xE0;
 5a8:	80 ee       	ldi	r24, 0xE0	; 224
 5aa:	87 bd       	out	0x27, r24	; 39
 5ac:	ff e7       	ldi	r31, 0x7F	; 127
 5ae:	28 e3       	ldi	r18, 0x38	; 56
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	f1 50       	subi	r31, 0x01	; 1
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 5bc:	00 00       	nop
			_delay_ms(50);
			OCR0B = 0x3F;
 5be:	8f e3       	ldi	r24, 0x3F	; 63
 5c0:	88 bd       	out	0x28, r24	; 40
 5c2:	9f e7       	ldi	r25, 0x7F	; 127
 5c4:	e8 e3       	ldi	r30, 0x38	; 56
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	91 50       	subi	r25, 0x01	; 1
 5ca:	e0 40       	sbci	r30, 0x00	; 0
 5cc:	f0 40       	sbci	r31, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5d2:	00 00       	nop
			_delay_ms(50);
			OCR0A = LightFull;
 5d4:	47 bc       	out	0x27, r4	; 39
 5d6:	2f e7       	ldi	r18, 0x7F	; 127
 5d8:	88 e3       	ldi	r24, 0x38	; 56
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 5e6:	00 00       	nop
			_delay_ms(50);
			OCR0B = 0x1F;
 5e8:	8f e1       	ldi	r24, 0x1F	; 31
 5ea:	88 bd       	out	0x28, r24	; 40
 5ec:	ef e7       	ldi	r30, 0x7F	; 127
 5ee:	f8 e3       	ldi	r31, 0x38	; 56
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	e1 50       	subi	r30, 0x01	; 1
 5f4:	f0 40       	sbci	r31, 0x00	; 0
 5f6:	20 40       	sbci	r18, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
 5fc:	00 00       	nop
 5fe:	88 c0       	rjmp	.+272    	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
			_delay_ms(50);
			
		}
		
		//RGB Sweep
		else if(lMode == 4)
 600:	8c 81       	ldd	r24, Y+4	; 0x04
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	09 f0       	breq	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 606:	5c c0       	rjmp	.+184    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
		{
			if(RUp)
 608:	22 20       	and	r2, r2
 60a:	29 f0       	breq	.+10     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
			{
				ValueR++;
 60c:	9d 81       	ldd	r25, Y+5	; 0x05
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	9d 83       	std	Y+5, r25	; 0x05
				if(ValueR>=255)
 612:	9f 3f       	cpi	r25, 0xFF	; 255
 614:	19 f0       	breq	.+6      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
					RUp = false;
					BDown = true;
				}
			}
			
			if(GUp)
 616:	33 20       	and	r3, r3
 618:	51 f0       	breq	.+20     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 61a:	03 c0       	rjmp	.+6      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
				if(ValueR>=255)
				{
					ValueR = 255;
					GUp = true;
					RUp = false;
					BDown = true;
 61c:	e1 e0       	ldi	r30, 0x01	; 1
 61e:	e9 83       	std	Y+1, r30	; 0x01
				ValueR++;
				if(ValueR>=255)
				{
					ValueR = 255;
					GUp = true;
					RUp = false;
 620:	21 2c       	mov	r2, r1
				}
			}
			
			if(GUp)
			{
				ValueG++;
 622:	1f 5f       	subi	r17, 0xFF	; 255
				if(ValueG>=255)
 624:	1f 3f       	cpi	r17, 0xFF	; 255
 626:	09 f4       	brne	.+2      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 628:	78 c0       	rjmp	.+240    	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
 62a:	33 24       	eor	r3, r3
 62c:	33 94       	inc	r3
					GUp = false;
					RDown = true;
				}
			}
			
			if(BUp)
 62e:	fb 81       	ldd	r31, Y+3	; 0x03
 630:	ff 23       	and	r31, r31
 632:	21 f0       	breq	.+8      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
			{
				ValueB++;
 634:	0f 5f       	subi	r16, 0xFF	; 255
				if(ValueB>=255)
 636:	0f 3f       	cpi	r16, 0xFF	; 255
 638:	09 f4       	brne	.+2      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
 63a:	60 c0       	rjmp	.+192    	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
					BUp = false;
					GDown = true;
				}
			}
			
			if(RDown)
 63c:	66 20       	and	r6, r6
 63e:	a1 f0       	breq	.+40     	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 640:	0c c0       	rjmp	.+24     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
					BUp = false;
					GDown = true;
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	2a 83       	std	Y+2, r18	; 0x02
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
					BUp = false;
 646:	1b 82       	std	Y+3, r1	; 0x03
			{
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
 648:	22 24       	eor	r2, r2
 64a:	23 94       	inc	r2
 64c:	06 c0       	rjmp	.+12     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
					BUp = false;
					GDown = true;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	8a 83       	std	Y+2, r24	; 0x02
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
					BUp = false;
 652:	1b 82       	std	Y+3, r1	; 0x03
				ValueG++;
				if(ValueG>=255)
				{
					ValueG = 255;
					BUp = true;
					GUp = false;
 654:	31 2c       	mov	r3, r1
			{
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
 656:	22 24       	eor	r2, r2
 658:	23 94       	inc	r2
				}
			}
			
			if(RDown)
			{
				ValueR--;
 65a:	9d 81       	ldd	r25, Y+5	; 0x05
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	9d 83       	std	Y+5, r25	; 0x05
				if(ValueR<=0)
 660:	99 23       	and	r25, r25
 662:	31 f0       	breq	.+12     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
 664:	66 24       	eor	r6, r6
 666:	63 94       	inc	r6
					ValueR=0;
					RDown = false;
					GDown = true;
				}
			}
			if(GDown)
 668:	ea 81       	ldd	r30, Y+2	; 0x02
 66a:	ee 23       	and	r30, r30
 66c:	31 f0       	breq	.+12     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
 66e:	01 c0       	rjmp	.+2      	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
			{
				ValueR--;
				if(ValueR<=0)
				{
					ValueR=0;
					RDown = false;
 670:	61 2c       	mov	r6, r1
					GDown = true;
				}
			}
			if(GDown)
			{
				ValueG--;
 672:	11 50       	subi	r17, 0x01	; 1
				if(ValueG<=0)
 674:	31 f0       	breq	.+12     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	fa 83       	std	Y+2, r31	; 0x02
					GDown = false;
					BDown = true;
				}
			}
			
			if(BDown)
 67a:	29 81       	ldd	r18, Y+1	; 0x01
 67c:	22 23       	and	r18, r18
 67e:	51 f0       	breq	.+20     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 680:	01 c0       	rjmp	.+2      	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
			{
				ValueG--;
				if(ValueG<=0)
				{
					ValueG=0;
					GDown = false;
 682:	1a 82       	std	Y+2, r1	; 0x02
				}
			}
			
			if(BDown)
			{
				ValueB--;
 684:	01 50       	subi	r16, 0x01	; 1
				if(ValueB<=0)
 686:	21 f4       	brne	.+8      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
				{
					ValueB=0;
					BDown = false;
 688:	19 82       	std	Y+1, r1	; 0x01
					RDown = true;
 68a:	66 24       	eor	r6, r6
 68c:	63 94       	inc	r6
 68e:	02 c0       	rjmp	.+4      	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			
			
			OCR1A = ValueR;
 694:	ed 81       	ldd	r30, Y+5	; 0x05
 696:	8e 2f       	mov	r24, r30
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	f5 01       	movw	r30, r10
 69c:	91 83       	std	Z+1, r25	; 0x01
 69e:	80 83       	st	Z, r24
			OCR1B = ValueG;
 6a0:	81 2f       	mov	r24, r17
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	f6 01       	movw	r30, r12
 6a6:	91 83       	std	Z+1, r25	; 0x01
 6a8:	80 83       	st	Z, r24
			OCR2B = ValueB;
 6aa:	f7 01       	movw	r30, r14
 6ac:	00 83       	st	Z, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	fa e1       	ldi	r31, 0x1A	; 26
 6b0:	fa 95       	dec	r31
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		else
		{
			_delay_ms(250);
		}
		
		if(change_Mode)
 6b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6ba:	81 11       	cpse	r24, r1
 6bc:	16 c0       	rjmp	.+44     	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
 6be:	7b ce       	rjmp	.-778    	; 0x3b6 <main+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c0:	2f e7       	ldi	r18, 0x7F	; 127
 6c2:	8a e1       	ldi	r24, 0x1A	; 26
 6c4:	96 e0       	ldi	r25, 0x06	; 6
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	90 40       	sbci	r25, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <__EEPROM_REGION_LENGTH__+0x2c6>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6d0:	00 00       	nop
 6d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6da:	6d ce       	rjmp	.-806    	; 0x3b6 <main+0x7e>
		{
			lMode++;
 6dc:	ec 81       	ldd	r30, Y+4	; 0x04
 6de:	ef 5f       	subi	r30, 0xFF	; 255
 6e0:	ec 83       	std	Y+4, r30	; 0x04
			
			if(lMode >= 5)
 6e2:	e5 30       	cpi	r30, 0x05	; 5
 6e4:	18 f0       	brcs	.+6      	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
			{
				lMode = 0;
 6e6:	1c 82       	std	Y+4, r1	; 0x04
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
 6ea:	1c 82       	std	Y+4, r1	; 0x04
			}
			change_Mode = false;
 6ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			set_Test_LED(false);
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 80 01 	call	0x300	; 0x300 <set_Test_LED>
			sei();
 6f8:	78 94       	sei
 6fa:	5d ce       	rjmp	.-838    	; 0x3b6 <main+0x7e>
					BUp = false;
					GDown = true;
				}
			}
			
			if(RDown)
 6fc:	61 10       	cpse	r6, r1
 6fe:	a1 cf       	rjmp	.-190    	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
					BUp = false;
 700:	1b 82       	std	Y+3, r1	; 0x03
			{
				ValueB++;
				if(ValueB>=255)
				{
					ValueB = 255;
					RUp = true;
 702:	22 24       	eor	r2, r2
 704:	23 94       	inc	r2
 706:	b5 cf       	rjmp	.-150    	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
			_delay_ms(250);
		}
		
		if(change_Mode)
		{
			lMode++;
 708:	fc 81       	ldd	r31, Y+4	; 0x04
 70a:	ff 5f       	subi	r31, 0xFF	; 255
 70c:	fc 83       	std	Y+4, r31	; 0x04
 70e:	ee cf       	rjmp	.-36     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
		else
		{
			_delay_ms(250);
		}
		
		if(change_Mode)
 710:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 714:	81 11       	cpse	r24, r1
 716:	f8 cf       	rjmp	.-16     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
 718:	4e ce       	rjmp	.-868    	; 0x3b6 <main+0x7e>
				}
			}
			
			if(BUp)
			{
				ValueB++;
 71a:	0f 5f       	subi	r16, 0xFF	; 255
				if(ValueB>=255)
 71c:	0f 3f       	cpi	r16, 0xFF	; 255
 71e:	09 f4       	brne	.+2      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 720:	96 cf       	rjmp	.-212    	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
				if(ValueG>=255)
				{
					ValueG = 255;
					BUp = true;
					GUp = false;
					RDown = true;
 722:	66 24       	eor	r6, r6
 724:	63 94       	inc	r6
				ValueG++;
				if(ValueG>=255)
				{
					ValueG = 255;
					BUp = true;
					GUp = false;
 726:	31 2c       	mov	r3, r1
			}
			
			if(BUp)
			{
				ValueB++;
				if(ValueB>=255)
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	2b 83       	std	Y+3, r18	; 0x03
 72c:	87 cf       	rjmp	.-242    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
			_delay_ms(250);
		}
		
		if(change_Mode)
		{
			lMode++;
 72e:	8c 81       	ldd	r24, Y+4	; 0x04
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	8c 83       	std	Y+4, r24	; 0x04
 734:	db cf       	rjmp	.-74     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
			change_Mode = false;
			set_Test_LED(false);
			sei();
		}
	}		
}
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	7f 90       	pop	r7
 75e:	6f 90       	pop	r6
 760:	5f 90       	pop	r5
 762:	4f 90       	pop	r4
 764:	3f 90       	pop	r3
 766:	2f 90       	pop	r2
 768:	08 95       	ret

0000076a <__vector_1>:


//ISR INT0

ISR (INT0_vect)
{
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	8f 93       	push	r24
	change_Mode = true;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//set_Test_LED(true);
}
 77c:	8f 91       	pop	r24
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
