
Scheinwerfer_Dirk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800108  00800108  00000724  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9c  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e1  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3a  00000000  00000000  00001f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000325b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
  9e:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:

void init_ADC()
{
	
	//ADC Reference
	ADMUX &= ~(1<<REFS1);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
	
	//ADC Left Adjust - on
	ADMUX |= (1<<ADLAR);
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
	
	//ADC Channel Selection
	//ADC Channel0
	ADMUX &= ~(1<<MUX3);
  bc:	80 81       	ld	r24, Z
  be:	87 7f       	andi	r24, 0xF7	; 247
  c0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
  c8:	80 81       	ld	r24, Z
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX0);
  ce:	80 81       	ld	r24, Z
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX1);
	ADMUX |= (1<<MUX0);
	*/

	//ADC Auto Trigger - off
	ADCSRA &= ~(1<<ADATE);	
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	80 83       	st	Z, r24
	
	//ADC Prescaler - Clock with Prescaler/16 = 500 kHz
	ADCSRA |= (1<<ADPS2);
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS1);
  e4:	80 81       	ld	r24, Z
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
  ea:	80 81       	ld	r24, Z
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	80 83       	st	Z, r24
//	ADCSRA &= ~(1<<ADPS2);
//	ADCSRA |= (1<<ADPS1);
//	ADCSRA |= (1<<ADPS0);

	//ADC Auto Trigger Source - Free running
	ADCSRB &= ~(1<<ADTS2);
  f0:	ab e7       	ldi	r26, 0x7B	; 123
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	8c 91       	ld	r24, X
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS1);
  fa:	8c 91       	ld	r24, X
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS0);
 100:	8c 91       	ld	r24, X
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	8c 93       	st	X, r24
	
	//Analog Comparator Multiplexed Input - off
	ADCSRB &= ~(1<<ACME);
 106:	8c 91       	ld	r24, X
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
	
	//First Run
	//ADC enable
	ADCSRA |= (1<<ADEN);
 10c:	80 81       	ld	r24, Z
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 83       	st	Z, r24
	
	//ADC First conversion
	ADCSRA |= (1<<ADSC);
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	
	//DUmmy Readout
	while (ADCSRA & (1<<ADSC)) {}        // wait for hardware to finis
 118:	80 81       	ld	r24, Z
 11a:	86 fd       	sbrc	r24, 6
 11c:	fd cf       	rjmp	.-6      	; 0x118 <init_ADC+0x72>
	
	// ADCW has to be read so that the next conversion has an effect
	uint8_t result = ADCH;	
 11e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 122:	08 95       	ret

00000124 <readADC>:
}

uint8_t readADC(uint8_t channel)
{
	// select channel bits
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	90 7e       	andi	r25, 0xE0	; 224
 12c:	8f 71       	andi	r24, 0x1F	; 31
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);            // single conversion
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}  // wait for hardware to finish
 13c:	80 81       	ld	r24, Z
 13e:	86 fd       	sbrc	r24, 6
 140:	fd cf       	rjmp	.-6      	; 0x13c <readADC+0x18>
	return ADCH;                    // read ADC value and return as result	
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 146:	08 95       	ret

00000148 <init_Counter0_PWM>:

void init_Counter0_PWM()
{
	
	//Ausgang setzen
	DDRD |= (1<<DDD6);
 148:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD5);
 14a:	55 9a       	sbi	0x0a, 5	; 10
	
	
	//PWM Mode - Fast PWM
	TCCR0A |= (1<<WGM00);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
 152:	84 b5       	in	r24, 0x24	; 36
 154:	82 60       	ori	r24, 0x02	; 2
 156:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<WGM02);
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	85 bd       	out	0x25, r24	; 37
	
	//Clock Select - CLK from Prescaler / 256
	TCCR0B &= ~(1<<CS00);
 15e:	85 b5       	in	r24, 0x25	; 37
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
 164:	85 b5       	in	r24, 0x25	; 37
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS02);
 16a:	85 b5       	in	r24, 0x25	; 37
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
	TCCR0B |= (1<<CS02);
*/
		
	//Output A - clear OC0A on Compare Match, set OC0A at BOTTOM,(non-inverting mode). Hardware inv.
	TCCR0A |= (1<<COM0A1);
 170:	84 b5       	in	r24, 0x24	; 36
 172:	80 68       	ori	r24, 0x80	; 128
 174:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0A0);
 176:	84 b5       	in	r24, 0x24	; 36
 178:	8f 7b       	andi	r24, 0xBF	; 191
 17a:	84 bd       	out	0x24, r24	; 36
	
	//Output B - clear OC0B on Compare Match, set OC0B at BOTTOM,(non-inverting mode). Hardware inv.
	TCCR0A |= (1<<COM0B1);
 17c:	84 b5       	in	r24, 0x24	; 36
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<COM0B0);
 182:	84 b5       	in	r24, 0x24	; 36
 184:	8f 7e       	andi	r24, 0xEF	; 239
 186:	84 bd       	out	0x24, r24	; 36
	
	//Force Output Compare - only for non-PWM
	TCCR0B &= ~(1<<FOC0A);
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<FOC0B);
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	85 bd       	out	0x25, r24	; 37


	//Timer/Counter Interrupt Mask Register
	TIMSK0 &= ~(1<<OCIE0B); //no B Match Interrupt
 194:	ee e6       	ldi	r30, 0x6E	; 110
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	80 83       	st	Z, r24
	TIMSK0 &= ~(1<<OCIE0A); //no A Match Interrupt
 19e:	80 81       	ld	r24, Z
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	80 83       	st	Z, r24
	TIMSK0 &= ~(1<<TOIE0);  //no Overflow Interrupt
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	80 83       	st	Z, r24

	//Counter
	TCNT0 = 0x00;
 1aa:	16 bc       	out	0x26, r1	; 38

	//OutputCompareRegister (PWM Rate)
	OCR0A = 0xFF; //PD6
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xFF; //PD5
 1b0:	88 bd       	out	0x28, r24	; 40
 1b2:	08 95       	ret

000001b4 <init_Counter1_PWM>:
#include "init_Counter1_PWM.h"

void init_Counter1_PWM()
{
	//Ausgang setzen
	DDRB |= (1<<DDB1);
 1b4:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<DDB2);
 1b6:	22 9a       	sbi	0x04, 2	; 4
	
	
	//PWM Mode - Fast PWM 8-bit
	TCCR1A |= (1<<WGM10);
 1b8:	a0 e8       	ldi	r26, 0x80	; 128
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	8c 91       	ld	r24, X
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<WGM11);
 1c2:	8c 91       	ld	r24, X
 1c4:	8d 7f       	andi	r24, 0xFD	; 253
 1c6:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
 1c8:	e1 e8       	ldi	r30, 0x81	; 129
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	80 83       	st	Z, r24
	
	//Clock Select - CLK from Prescaler / 256
	TCCR1B &= ~(1<<CS10);
 1d8:	80 81       	ld	r24, Z
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);	
 1de:	80 81       	ld	r24, Z
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12);
 1e4:	80 81       	ld	r24, Z
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);
	TCCR1B |= (1<<CS12);
*/
	
	//Output A - Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM,(non-inverting mode).
	TCCR1A |= (1<<COM1A1);
 1ea:	8c 91       	ld	r24, X
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<COM1A0);
 1f0:	8c 91       	ld	r24, X
 1f2:	8f 7b       	andi	r24, 0xBF	; 191
 1f4:	8c 93       	st	X, r24
	
	//Output B - Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at BOTTOM,(non-inverting mode).
	TCCR1A |= (1<<COM1B1);
 1f6:	8c 91       	ld	r24, X
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<COM1B0);
 1fc:	8c 91       	ld	r24, X
 1fe:	8f 7e       	andi	r24, 0xEF	; 239
 200:	8c 93       	st	X, r24
	
	//Input Capture Noise Canceler - off
	TCCR1B &= ~(1<<ICNC1);
 202:	80 81       	ld	r24, Z
 204:	8f 77       	andi	r24, 0x7F	; 127
 206:	80 83       	st	Z, r24
	
	//Input Capture Edge Select - falling
	TCCR1B &= ~(1<<ICES1);
 208:	80 81       	ld	r24, Z
 20a:	8f 7b       	andi	r24, 0xBF	; 191
 20c:	80 83       	st	Z, r24

	//Force Output Compare - off
	TCCR1C &= ~(1<<FOC1A);
 20e:	e2 e8       	ldi	r30, 0x82	; 130
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8f 77       	andi	r24, 0x7F	; 127
 216:	80 83       	st	Z, r24
	TCCR1C &= ~(1<<FOC1B);	
 218:	80 81       	ld	r24, Z
 21a:	8f 7b       	andi	r24, 0xBF	; 191
 21c:	80 83       	st	Z, r24
	
	//Timer/Counter Interrupt Mask Register
	TIMSK1 &= ~(1<<ICIE1); //no Input Capture Interrupt
 21e:	ef e6       	ldi	r30, 0x6F	; 111
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8f 7d       	andi	r24, 0xDF	; 223
 226:	80 83       	st	Z, r24
	TIMSK1 &= ~(1<<OCIE1B); //no B Match Interrupt
 228:	80 81       	ld	r24, Z
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	80 83       	st	Z, r24
	TIMSK1 &= ~(1<<OCIE1A); //no A Match Interrupt
 22e:	80 81       	ld	r24, Z
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	80 83       	st	Z, r24
	TIMSK1 &= ~(1<<TOIE1);  //no Overflow Interrupt
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24

	//Counter
	TCNT1 = 0x0000;
 23a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 23e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	//OutputCompareRegister (PWM Rate)
	OCR1A = 0xFF; //PB1
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0xFF; //PB2
 24e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 252:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 256:	08 95       	ret

00000258 <init_Counter2_PWM>:
#include "init_Counter2_PWM.h"

void init_Counter2_PWM()
{
	//Ausgang setzen
	DDRD |= (1<<DDD3);
 258:	53 9a       	sbi	0x0a, 3	; 10
		
		
	//PWM Mode - Fast PWM 8-bit
	TCCR2A |= (1<<WGM20);
 25a:	a0 eb       	ldi	r26, 0xB0	; 176
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	8c 91       	ld	r24, X
 260:	81 60       	ori	r24, 0x01	; 1
 262:	8c 93       	st	X, r24
	TCCR2A |= (1<<WGM21);
 264:	8c 91       	ld	r24, X
 266:	82 60       	ori	r24, 0x02	; 2
 268:	8c 93       	st	X, r24
	TCCR2B &= ~(1<<WGM22);
 26a:	e1 eb       	ldi	r30, 0xB1	; 177
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	80 83       	st	Z, r24
	
	//Clock Select - CLK from Prescaler / 256
	TCCR2B &= ~(1<<CS20);
 274:	80 81       	ld	r24, Z
 276:	8e 7f       	andi	r24, 0xFE	; 254
 278:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
 27a:	80 81       	ld	r24, Z
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
 280:	80 81       	ld	r24, Z
 282:	84 60       	ori	r24, 0x04	; 4
 284:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
	TCCR2B |= (1<<CS22);
*/	
	
	//Output A - Clear OC2A on Compare Match, set OC2A at BOTTOM,(non-inverting mode)
	TCCR2A &= ~ (1<<COM2A1);
 286:	8c 91       	ld	r24, X
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	8c 93       	st	X, r24
	TCCR2A &= ~ (1<<COM2A0);
 28c:	8c 91       	ld	r24, X
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	8c 93       	st	X, r24
	
	//Output B - Clear OC2B on Compare Match, set OC2B at BOTTOM,(non-inverting mode).
	TCCR2A |= (1<<COM2B1);
 292:	8c 91       	ld	r24, X
 294:	80 62       	ori	r24, 0x20	; 32
 296:	8c 93       	st	X, r24
	TCCR2A &= ~ (1<<COM2B0);
 298:	8c 91       	ld	r24, X
 29a:	8f 7e       	andi	r24, 0xEF	; 239
 29c:	8c 93       	st	X, r24
	
	//Force Output Compare - off
	TCCR2B &= ~(1<<FOC2A);
 29e:	80 81       	ld	r24, Z
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	80 83       	st	Z, r24
	TCCR2B &= ~(1<<FOC2B);
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 7b       	andi	r24, 0xBF	; 191
 2a8:	80 83       	st	Z, r24

	//Timer/Counter Interrupt Mask Register
	TIMSK2 &= ~(1<<OCIE2B); //no B Match Interrupt
 2aa:	e0 e7       	ldi	r30, 0x70	; 112
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8b 7f       	andi	r24, 0xFB	; 251
 2b2:	80 83       	st	Z, r24
	TIMSK2 &= ~(1<<OCIE2A); //no A Match Interrupt
 2b4:	80 81       	ld	r24, Z
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	80 83       	st	Z, r24
	TIMSK2 &= ~(1<<TOIE2);  //no Overflow Interrupt
 2ba:	80 81       	ld	r24, Z
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	80 83       	st	Z, r24

	//Counter
	TCNT2 = 0x00;
 2c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	//OutputCompareRegister (PWM Rate)
	OCR2B = 0xFF; //PD3
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 2ca:	08 95       	ret

000002cc <init_Interrupts>:

void init_Interrupts()
{
	//Ausgang/Eingang setzen (1=Ausgang; 0=Eingang)
	//Interrupts
	DDRD &= ~(1<<DDD2);
 2cc:	52 98       	cbi	0x0a, 2	; 10
	
	//INT0 - on - rising edge
	EIMSK |= (1<<INT0); //1 = INT0 enable
 2ce:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01); //1 = INT0 Falling Edge
 2d0:	e9 e6       	ldi	r30, 0x69	; 105
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00); //1 = INT0 Falling Edge
 2da:	80 81       	ld	r24, Z
 2dc:	8e 7f       	andi	r24, 0xFE	; 254
 2de:	80 83       	st	Z, r24
	
	//INT1 - off - low
	EIMSK &= ~(1<<INT1);
 2e0:	e9 98       	cbi	0x1d, 1	; 29
	EICRA &= ~(1<<ISC11);
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC10);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
	
	//Pin Change Interrupt 0
	PCICR &= ~(1<<PCIE0); //1 = PinChange Interrupt Block 0
 2ee:	a8 e6       	ldi	r26, 0x68	; 104
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	8c 91       	ld	r24, X
 2f4:	8e 7f       	andi	r24, 0xFE	; 254
 2f6:	8c 93       	st	X, r24
	PCMSK0 &= ~(1<<PCINT0);
 2f8:	eb e6       	ldi	r30, 0x6B	; 107
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT1);
 302:	80 81       	ld	r24, Z
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT2);
 308:	80 81       	ld	r24, Z
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT3);
 30e:	80 81       	ld	r24, Z
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT4);
 314:	80 81       	ld	r24, Z
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT5);
 31a:	80 81       	ld	r24, Z
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT6);
 320:	80 81       	ld	r24, Z
 322:	8f 7b       	andi	r24, 0xBF	; 191
 324:	80 83       	st	Z, r24
	PCMSK0 &= ~(1<<PCINT7);
 326:	80 81       	ld	r24, Z
 328:	8f 77       	andi	r24, 0x7F	; 127
 32a:	80 83       	st	Z, r24
		
	//Pin Change Interrupt 1
	PCICR &= ~(1<<PCIE1); //1 = PinChange Interrupt Block 1
 32c:	8c 91       	ld	r24, X
 32e:	8d 7f       	andi	r24, 0xFD	; 253
 330:	8c 93       	st	X, r24
	PCMSK1 &= ~(1<<PCINT8);
 332:	ec e6       	ldi	r30, 0x6C	; 108
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8e 7f       	andi	r24, 0xFE	; 254
 33a:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT9);
 33c:	80 81       	ld	r24, Z
 33e:	8d 7f       	andi	r24, 0xFD	; 253
 340:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT10);
 342:	80 81       	ld	r24, Z
 344:	8b 7f       	andi	r24, 0xFB	; 251
 346:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT11);
 348:	80 81       	ld	r24, Z
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT12);
 34e:	80 81       	ld	r24, Z
 350:	8f 7e       	andi	r24, 0xEF	; 239
 352:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT13);
 354:	80 81       	ld	r24, Z
 356:	8f 7d       	andi	r24, 0xDF	; 223
 358:	80 83       	st	Z, r24
	PCMSK1 &= ~(1<<PCINT14);
 35a:	80 81       	ld	r24, Z
 35c:	8f 7b       	andi	r24, 0xBF	; 191
 35e:	80 83       	st	Z, r24
	
	//Pin Change Interrupt 2
	PCICR &= ~(1<<PCIE2); //1 = PinChange Interrupt Block 2
 360:	8c 91       	ld	r24, X
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	8c 93       	st	X, r24
	PCMSK2 &= ~(1<<PCINT16);
 366:	ed e6       	ldi	r30, 0x6D	; 109
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT17);
 370:	80 81       	ld	r24, Z
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT18);
 376:	80 81       	ld	r24, Z
 378:	8b 7f       	andi	r24, 0xFB	; 251
 37a:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT19);
 37c:	80 81       	ld	r24, Z
 37e:	87 7f       	andi	r24, 0xF7	; 247
 380:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT20);
 382:	80 81       	ld	r24, Z
 384:	8f 7e       	andi	r24, 0xEF	; 239
 386:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT21);
 388:	80 81       	ld	r24, Z
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT22);
 38e:	80 81       	ld	r24, Z
 390:	8f 7b       	andi	r24, 0xBF	; 191
 392:	80 83       	st	Z, r24
	PCMSK2 &= ~(1<<PCINT23);	
 394:	80 81       	ld	r24, Z
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <init>:

bool LEDUp = 1;

void init()
{
	init_Interrupts();
 39c:	0e 94 66 01 	call	0x2cc	; 0x2cc <init_Interrupts>
	
	init_Counter0_PWM();
 3a0:	0e 94 a4 00 	call	0x148	; 0x148 <init_Counter0_PWM>
	init_Counter1_PWM();
 3a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init_Counter1_PWM>
	init_Counter2_PWM();
 3a8:	0e 94 2c 01 	call	0x258	; 0x258 <init_Counter2_PWM>
	
	init_ADC();
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
 3b0:	08 95       	ret

000003b2 <testLoop>:
}

void testLoop()
{
	OCR0A = 0xFF; //LED Bot 0xFF=off 0x00=on
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xFF; //LED Top 0xFF=off 0x00=on
 3b6:	88 bd       	out	0x28, r24	; 40
	OCR1A = 0XFF; //R 0xFF=off 0x00=on
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0xFF; //G 0xFF=off 0x00=on
 3c4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3c8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR2B = 0xFF; //B 0xFF=off 0x00=on
 3cc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3d0:	08 95       	ret

000003d2 <readPotis>:
}

void readPotis()
{
	PotiR = readADC(0);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 92 00 	call	0x124	; 0x124 <readADC>
 3d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PotiR>
	PotiG = readADC(1);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 92 00 	call	0x124	; 0x124 <readADC>
 3e2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PotiG>
	PotiB = readADC(2);
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 92 00 	call	0x124	; 0x124 <readADC>
 3ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PotiB>
	PotiSys = readADC(3);
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 92 00 	call	0x124	; 0x124 <readADC>
 3f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <PotiSys>
 3fa:	08 95       	ret

000003fc <RGBSweep>:
	
}

void RGBSweep()
{
	if(RUp)
 3fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RUp>
 400:	88 23       	and	r24, r24
 402:	89 f0       	breq	.+34     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		ValueR--;
 404:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ValueR>
 408:	81 50       	subi	r24, 0x01	; 1
		if(ValueR<=0)
 40a:	19 f0       	breq	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>

void RGBSweep()
{
	if(RUp)
	{
		ValueR--;
 40c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ValueR>
 410:	0a c0       	rjmp	.+20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		if(ValueR<=0)
		{
			ValueR = 0;
 412:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ValueR>
			GUp = true;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <GUp>
			RUp = false;
 41c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <RUp>
			BDown = true;
 420:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <BDown>
 424:	04 c0       	rjmp	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		}
	}
	
	if(GUp)
 426:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <GUp>
 42a:	88 23       	and	r24, r24
 42c:	89 f0       	breq	.+34     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	{
		ValueG--;
 42e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ValueG>
 432:	81 50       	subi	r24, 0x01	; 1
		if(ValueG<=0)
 434:	19 f0       	breq	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		}
	}
	
	if(GUp)
	{
		ValueG--;
 436:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ValueG>
 43a:	0a c0       	rjmp	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		if(ValueG<=0)
		{
			ValueG = 0;
 43c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ValueG>
			BUp = true;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <BUp>
			GUp = false;
 446:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <GUp>
			RDown = true;
 44a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <RDown>
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		}
	}
	
	if(BUp)
 450:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <BUp>
 454:	88 23       	and	r24, r24
 456:	a9 f0       	breq	.+42     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
	{
		ValueB--;
 458:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ValueB>
 45c:	81 50       	subi	r24, 0x01	; 1
		if(ValueB<=0)
 45e:	19 f0       	breq	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		}
	}
	
	if(BUp)
	{
		ValueB--;
 460:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ValueB>
 464:	0e c0       	rjmp	.+28     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		if(ValueB<=0)
		{
			ValueB = 0;
 466:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ValueB>
			RUp = true;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <RUp>
			BUp = false;
 470:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <BUp>
			GDown = true;
 474:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		}
	}
	
	if(RDown)
 478:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <RDown>
 47c:	81 11       	cpse	r24, r1
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 480:	15 c0       	rjmp	.+42     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 482:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <RDown>
 486:	88 23       	and	r24, r24
 488:	69 f0       	breq	.+26     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
	{
		ValueR++;
 48a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ValueR>
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ValueR>
		if(ValueR>=255)
 494:	8f 3f       	cpi	r24, 0xFF	; 255
 496:	31 f4       	brne	.+12     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			ValueR=255;
			RDown = false;
 498:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <RDown>
			GDown = true;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		}
	}
	if(GDown)
 4a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 4a8:	88 23       	and	r24, r24
 4aa:	69 f0       	breq	.+26     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
	{
		ValueG++;
 4ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ValueG>
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ValueG>
		if(ValueG>=255)
 4b6:	8f 3f       	cpi	r24, 0xFF	; 255
 4b8:	31 f4       	brne	.+12     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		{
			ValueG=255;
			GDown = false;
 4ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			BDown = true;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <BDown>
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		}
	}
	
	if(BDown)
 4c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <BDown>
 4ca:	88 23       	and	r24, r24
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	{
		ValueB++;
 4ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ValueB>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ValueB>
		if(ValueB>=255)
 4d8:	8f 3f       	cpi	r24, 0xFF	; 255
 4da:	29 f4       	brne	.+10     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		{
			ValueB=255;
			BDown = false;
 4dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <BDown>
			RDown = true;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <RDown>
		}
	}
	
	
	OCR1A = ValueR;
 4e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ValueR>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = ValueG;
 4f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ValueG>
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4fe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR2B = ValueB;
 502:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ValueB>
 506:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 50a:	08 95       	ret

0000050c <LEDSweep>:
}

void LEDSweep()
{
	if(LEDSweepPrescaleCounter >= LEDSweepPrescaler)
 50c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <LEDSweepPrescaleCounter>
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	40 f1       	brcs	.+80     	; 0x564 <LEDSweep+0x58>
	{
		LEDSweepPrescaleCounter = 0;
 514:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <LEDSweepPrescaleCounter>
		if(LEDUp)
 518:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 51c:	88 23       	and	r24, r24
 51e:	71 f0       	breq	.+28     	; 0x53c <LEDSweep+0x30>
		{
			ValueLED--;
 520:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ValueLED>
 524:	81 50       	subi	r24, 0x01	; 1
			if(ValueLED <= LEDLimitMax)
 526:	81 36       	cpi	r24, 0x61	; 97
 528:	18 f0       	brcs	.+6      	; 0x530 <LEDSweep+0x24>
	if(LEDSweepPrescaleCounter >= LEDSweepPrescaler)
	{
		LEDSweepPrescaleCounter = 0;
		if(LEDUp)
		{
			ValueLED--;
 52a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ValueLED>
 52e:	14 c0       	rjmp	.+40     	; 0x558 <LEDSweep+0x4c>
			if(ValueLED <= LEDLimitMax)
			{
				ValueLED = LEDLimitMax;
 530:	80 e6       	ldi	r24, 0x60	; 96
 532:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ValueLED>
				LEDUp = false;
 536:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <LEDSweep+0x4c>
			}
		}
		else
		{
			ValueLED++;
 53c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ValueLED>
 540:	8f 5f       	subi	r24, 0xFF	; 255
			if(ValueLED >= LEDLimitMin)
 542:	8f 3e       	cpi	r24, 0xEF	; 239
 544:	18 f4       	brcc	.+6      	; 0x54c <LEDSweep+0x40>
				LEDUp = false;
			}
		}
		else
		{
			ValueLED++;
 546:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ValueLED>
 54a:	06 c0       	rjmp	.+12     	; 0x558 <LEDSweep+0x4c>
			if(ValueLED >= LEDLimitMin)
			{
				ValueLED = LEDLimitMin;
 54c:	8f ee       	ldi	r24, 0xEF	; 239
 54e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ValueLED>
				LEDUp = true;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		OCR0A = ValueLED;
 558:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ValueLED>
 55c:	87 bd       	out	0x27, r24	; 39
		OCR0B = OCR0A;
 55e:	87 b5       	in	r24, 0x27	; 39
 560:	88 bd       	out	0x28, r24	; 40
 562:	08 95       	ret
	}
	else
	{
		LEDSweepPrescaleCounter++;
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LEDSweepPrescaleCounter>
 56a:	08 95       	ret

0000056c <main>:
}

int main(void)
{
	//Init
	init();
 56c:	0e 94 ce 01 	call	0x39c	; 0x39c <init>
	sei();
 570:	78 94       	sei
	
	testLoop();
 572:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <testLoop>
			lMode = 0;
		}
		
		if(change_Mode == true)
		{
			lMode++;
 576:	dd 24       	eor	r13, r13
 578:	d3 94       	inc	r13
		else if(lMode == 2)
		{
			OCR0A = PotiSys;
			OCR0B = OCR0A;
			
			OCR1A = PotiR;
 57a:	0f 2e       	mov	r0, r31
 57c:	f8 e8       	ldi	r31, 0x88	; 136
 57e:	ef 2e       	mov	r14, r31
 580:	f1 2c       	mov	r15, r1
 582:	f0 2d       	mov	r31, r0
			OCR1B = PotiG;
 584:	0a e8       	ldi	r16, 0x8A	; 138
 586:	10 e0       	ldi	r17, 0x00	; 0
			OCR2B = PotiB;
 588:	c4 eb       	ldi	r28, 0xB4	; 180
 58a:	d0 e0       	ldi	r29, 0x00	; 0

	
	//Code   
	while (1)
	{   
		if(lMode == 0)
 58c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lMode>
 590:	81 11       	cpse	r24, r1
 592:	0b c0       	rjmp	.+22     	; 0x5aa <main+0x3e>
		{
			LEDSweep();
 594:	0e 94 86 02 	call	0x50c	; 0x50c <LEDSweep>
			RGBSweep();
 598:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RGBSweep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59c:	8f e1       	ldi	r24, 0x1F	; 31
 59e:	9e e4       	ldi	r25, 0x4E	; 78
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <main+0x34>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x3a>
 5a6:	00 00       	nop
 5a8:	41 c0       	rjmp	.+130    	; 0x62c <main+0xc0>
			_delay_us(SweepSpeedDefault);
		}
		else if(lMode == 1)
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	59 f4       	brne	.+22     	; 0x5c4 <main+0x58>
		{
			LEDSweep();
 5ae:	0e 94 86 02 	call	0x50c	; 0x50c <LEDSweep>
			RGBSweep();
 5b2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RGBSweep>
 5b6:	ef e8       	ldi	r30, 0x8F	; 143
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	31 97       	sbiw	r30, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <main+0x4e>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x54>
 5c0:	00 00       	nop
 5c2:	34 c0       	rjmp	.+104    	; 0x62c <main+0xc0>
			_delay_us(SweepSpeedFast);
		}
		else if(lMode == 2)
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	d9 f4       	brne	.+54     	; 0x5fe <main+0x92>
		{
			OCR0A = PotiSys;
 5c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PotiSys>
 5cc:	87 bd       	out	0x27, r24	; 39
			OCR0B = OCR0A;
 5ce:	87 b5       	in	r24, 0x27	; 39
 5d0:	88 bd       	out	0x28, r24	; 40
			
			OCR1A = PotiR;
 5d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PotiR>
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	f7 01       	movw	r30, r14
 5da:	91 83       	std	Z+1, r25	; 0x01
 5dc:	80 83       	st	Z, r24
			OCR1B = PotiG;
 5de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PotiG>
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	f8 01       	movw	r30, r16
 5e6:	91 83       	std	Z+1, r25	; 0x01
 5e8:	80 83       	st	Z, r24
			OCR2B = PotiB;
 5ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PotiB>
 5ee:	88 83       	st	Y, r24
 5f0:	8f e1       	ldi	r24, 0x1F	; 31
 5f2:	9e e4       	ldi	r25, 0x4E	; 78
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <main+0x88>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x8e>
 5fa:	00 00       	nop
 5fc:	17 c0       	rjmp	.+46     	; 0x62c <main+0xc0>
			_delay_us(SweepSpeedDefault);
		}
		else if(lMode ==  3)
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	71 f4       	brne	.+28     	; 0x61e <main+0xb2>
		{
			OCR0A = PotiSys;
 602:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PotiSys>
 606:	87 bd       	out	0x27, r24	; 39
			OCR0B = OCR0A;
 608:	87 b5       	in	r24, 0x27	; 39
 60a:	88 bd       	out	0x28, r24	; 40
			
			RGBSweep();
 60c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RGBSweep>
 610:	ef e1       	ldi	r30, 0x1F	; 31
 612:	fe e4       	ldi	r31, 0x4E	; 78
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <main+0xa8>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0xae>
 61a:	00 00       	nop
 61c:	07 c0       	rjmp	.+14     	; 0x62c <main+0xc0>
			_delay_us(SweepSpeedDefault);
		}
		else
		{
			lMode = 0;
 61e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lMode>
		}
		
		if(change_Mode == true)
 622:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <change_Mode>
 626:	81 11       	cpse	r24, r1
 628:	16 c0       	rjmp	.+44     	; 0x656 <main+0xea>
 62a:	12 c0       	rjmp	.+36     	; 0x650 <main+0xe4>
 62c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <change_Mode>
 630:	88 23       	and	r24, r24
 632:	71 f0       	breq	.+28     	; 0x650 <main+0xe4>
		{
			lMode++;
 634:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lMode>
 638:	8f 5f       	subi	r24, 0xFF	; 255
			if(lMode >= 4)
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	18 f4       	brcc	.+6      	; 0x644 <main+0xd8>
			lMode = 0;
		}
		
		if(change_Mode == true)
		{
			lMode++;
 63e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lMode>
 642:	02 c0       	rjmp	.+4      	; 0x648 <main+0xdc>
			if(lMode >= 4)
			{
				lMode = 0;
 644:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lMode>
			}
			
			change_Mode = false;
 648:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <change_Mode>
			Int_Counter = 0;
 64c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Int_Counter>
		}
		readPotis();		
 650:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <readPotis>
	}		
 654:	9b cf       	rjmp	.-202    	; 0x58c <main+0x20>
			lMode = 0;
		}
		
		if(change_Mode == true)
		{
			lMode++;
 656:	d0 92 12 01 	sts	0x0112, r13	; 0x800112 <lMode>
 65a:	f6 cf       	rjmp	.-20     	; 0x648 <main+0xdc>

0000065c <__vector_1>:
		readPotis();		
	}		
}

ISR (INT0_vect)
{
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	8f 93       	push	r24
	change_Mode = true;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <change_Mode>
	Int_Counter++;
 66e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Int_Counter>
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Int_Counter>
}
 678:	8f 91       	pop	r24
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
